"use strict";(self.webpackChunkcef_website=self.webpackChunkcef_website||[]).push([[283],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),r=n(7294),o=n(6010),i=n(2389),l=n(7392),s=n(7094),d=n(2466);const p="tabList__CuJ",u="tabItem_LNqP";function c(e){const{lazy:t,block:n,defaultValue:i,values:c,groupId:m,className:h}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=c??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,l.l)(g,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===i?i:i??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==y&&!g.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:v}=(0,s.U)(),[N,w]=(0,r.useState)(y),C=[],{blockElementScrollPositionUntilNextRender:T}=(0,d.o5)();if(null!=m){const e=k[m];null!=e&&e!==N&&g.some((t=>t.value===e))&&w(e)}const x=e=>{const t=e.currentTarget,n=C.indexOf(t),a=g[n].value;a!==N&&(T(t),w(a),null!=m&&v(m,String(a)))},E=e=>{let t=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{const n=C.indexOf(e.currentTarget)+1;t=C[n]??C[0];break}case"ArrowLeft":{const n=C.indexOf(e.currentTarget)-1;t=C[n]??C[C.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},h)},g.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>C.push(e),onKeyDown:E,onClick:x},i,{className:(0,o.Z)("tabs__item",u,i?.className,{"tabs__item--active":N===t})}),n??t)}))),t?(0,r.cloneElement)(f.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,i.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},8443:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(7462),r=(n(7294),n(3905));n(5162),n(5488);const o={toc:[]};function i(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Handler result"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Final response"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Data returned"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"200")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Data sent via ",(0,r.kt)("inlineCode",{parentName:"td"},"res.json()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"No data returned (",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"),")"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"204")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"res.end()")," called")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Error thrown"),(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"500")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/concepts/factory#error-serialisation"},"Serialised error")," sent via ",(0,r.kt)("inlineCode",{parentName:"td"},"res.json()"))))))}i.isMDXComponent=!0},1620:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a=n(7462),r=(n(7294),n(3905)),o=n(5162),i=n(5488),l=n(8443);const s={sidebar_position:3,description:"A description of a method for an API route."},d="Method",p={unversionedId:"concepts/method",id:"concepts/method",title:"Method",description:"A description of a method for an API route.",source:"@site/docs/concepts/method.mdx",sourceDirName:"concepts",slug:"/concepts/method",permalink:"/create-endpoint-factory/concepts/method",draft:!1,editUrl:"https://github.com/actual-experience/create-endpoint-factory/tree/main/website/docs/concepts/method.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"A description of a method for an API route."},sidebar:"docsSidebar",previous:{title:"Endpoint",permalink:"/create-endpoint-factory/concepts/endpoint"},next:{title:"Exports",permalink:"/create-endpoint-factory/exports"}},u={},c=[{value:"Configuration",id:"configuration",level:2},{value:"Handler",id:"handler",level:3},{value:"Custom codes",id:"custom-codes",level:4},{value:"Disabling default response handling",id:"disabling-default-response-handling",level:4},{value:"Parsing",id:"parsing",level:3}],m={toc:c};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"method"},"Method"),(0,r.kt)("p",null,"A method definition describes how an individual request to an ",(0,r.kt)("a",{parentName:"p",href:"./endpoint"},"endpoint")," should be handled, for a given HTTP method."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"A method definition can be configured to change its behaviour when executed."),(0,r.kt)("h3",{id:"handler"},"Handler"),(0,r.kt)("p",null,"The handler defines the main logic used when executing the method. It will be called with two objects, ",(0,r.kt)("inlineCode",{parentName:"p"},"handlerData")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"handlerApi"),"."),(0,r.kt)("p",null,"It's expected to execute some logic, and optionally return some data. Depending on what the method handler returns, the final ",(0,r.kt)("a",{parentName:"p",href:"./endpoint#combined-handler"},"endpoint handler")," will send a different status and response:"),(0,r.kt)(l.ZP,{mdxType:"HandleTable"}),(0,r.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="pages/api/foo.ts"',title:'"pages/api/foo.ts"'},"import { createEndpoint } from '../../src/api';\n\nconst endpoint = createEndpoint({\n  methods: (method) => ({\n    get: method({\n      // res.status(200).json('foo')\n      // highlight-next-line\n      handler: () => 'foo',\n    }),\n    put: method({\n      // res.status(204).end();\n      // highlight-start\n      handler: ({ body }) => {\n        console.log(body);\n      },\n      // highlight-end\n    }),\n    post: method({\n      // res.status(500).json(serializeError(new Error('oops!')));\n      // highlight-start\n      handler: () => {\n        throw new Error('oops!');\n      },\n      // highlight-end\n    }),\n  }),\n});\n\nexport default endpoint.handler;\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="pages/api/foo.ts"',title:'"pages/api/foo.ts"'},"import { createEndpoint } from '../../src/api';\n\nconst endpoint = createEndpoint({\n  methods: (method) => ({\n    get: method({\n      // res.status(200).json('foo')\n      // highlight-next-line\n      handler: () => 'foo',\n    }),\n    put: method({\n      // res.status(204).end();\n      // highlight-start\n      handler: ({ body }) => {\n        console.log(body);\n      },\n      // highlight-end\n    }),\n    post: method({\n      // res.status(500).json(serializeError(new Error('oops!')));\n      // highlight-start\n      handler: () => {\n        throw new Error('oops!');\n      },\n      // highlight-end\n    }),\n  }),\n});\n\nexport default endpoint.handler;\n")))),(0,r.kt)("h4",{id:"custom-codes"},"Custom codes"),(0,r.kt)("p",null,"In cases where you want to use a different status code, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"failWithCode")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"succeedWithCode")," utilities provided as part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"handlerApi")," object (second parameter for handler callback)."),(0,r.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="pages/api/foo.ts"',title:'"pages/api/foo.ts"'},"import { createEndpoint } from '../../src/api';\n\nconst endpoint = createEndpoint({\n  methods: (method) => ({\n    post: method<{ created: true }>({\n      handler: ({ body }, { failWithCode, succeedWithCode }) => {\n        console.log(body);\n        if (!body) {\n          throw failWithCode(400, 'No body provided');\n        }\n        return succeedWithCode(201, { created: true });\n      },\n    }),\n  }),\n});\n\nexport default endpoint.handler;\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="pages/api/foo.ts"',title:'"pages/api/foo.ts"'},"import { createEndpoint } from '../../src/api';\n\nconst endpoint = createEndpoint({\n  methods: (method) => ({\n    post: method({\n      handler: ({ body }, { failWithCode, succeedWithCode }) => {\n        console.log(body);\n        if (!body) {\n          throw failWithCode(400, 'No body provided');\n        }\n        return succeedWithCode(201, { created: true });\n      },\n    }),\n  }),\n});\n\nexport default endpoint.handler;\n")))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"failWithCode")," can be returned or thrown, but it's generally better to throw it yourself.")),(0,r.kt)("h4",{id:"disabling-default-response-handling"},"Disabling default response handling"),(0,r.kt)("p",null,"Typically, the default behaviour is preferable as it leads to less code overall."),(0,r.kt)("p",null,"However, sometimes it might be desireable to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"res")," parameter to send your response yourself (using it as a writeable stream, for example)."),(0,r.kt)("p",null,"To indicate that you have already sent the response and don't want CEF to conduct its usual response handling, you can return the ",(0,r.kt)("a",{parentName:"p",href:"/exports#nothing"},(0,r.kt)("inlineCode",{parentName:"a"},"nothing"))," symbol exported from CEF inside your handler."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"import { nothing } from 'next-create-endpoint-factory';\nimport { createEndpoint } from '../../src/api';\nimport stream from 'stream';\nimport { promisify } from 'util';\n\nconst pipeline = promisify(stream.pipeline);\n\nconst endpoint = createEndpoint({\n  methods: (method) => ({\n    get: method({\n      handler: (data, { res, failWithCode }) => {\n        const response = await fetch(\n          'https://w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf'\n        );\n        if (!response.ok) {\n          throw failWithCode(response.status, response.statusText);\n        }\n        res.setHeader('Content-Type', 'application/pdf');\n        res.setHeader('Content-Disposition', 'attachment; filename=dummy.pdf');\n        await pipeline(await response.blob(), res);\n        return nothing;\n      },\n    }),\n  }),\n});\n\nexport default endpoint.handler;\n")),(0,r.kt)("h3",{id:"parsing"},"Parsing"),(0,r.kt)("p",null,"To verify and optionally transform parts of the original request, you can provide parsers. These will receive the original data from a request, and are expected to return data that will be passed to the final handler, or throw an error."),(0,r.kt)("p",null,"Currently, you can provide parsers for ",(0,r.kt)("inlineCode",{parentName:"p"},"body")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),"."),(0,r.kt)(i.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="pages/api/foo.ts"',title:'"pages/api/foo.ts"'},"import { createEndpoint } from '../../src/api';\n\nconst endpoint = createEndpoint({\n  methods: (method) => ({\n    post: method<{ created: true }>()({\n      parsers: {\n        body: (body, failWithCode) => {\n          if (!body) {\n            throw failWithCode(400, 'no body provided');\n          }\n          if (typeof body !== 'string') {\n            throw failWithCode(400, 'invalid body');\n          }\n          return body; // now string\n        },\n      },\n      handler: ({ body }, { failWithCode, succeedWithCode }) => {\n        console.log(body); // typed as string thanks to parser\n        return succeedWithCode(201, { created: true });\n      },\n    }),\n  }),\n});\n\nexport default endpoint.handler;\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="pages/api/foo.ts"',title:'"pages/api/foo.ts"'},"import { createEndpoint } from '../../src/api';\n\nconst endpoint = createEndpoint({\n  methods: (method) => ({\n    post: method()({\n      parsers: {\n        body: (body, failWithCode) => {\n          if (!body) {\n            throw failWithCode(400, 'no body provided');\n          }\n          if (typeof body !== 'string') {\n            throw failWithCode(400, 'invalid body');\n          }\n          return body; // now string\n        },\n      },\n      handler: ({ body }, { failWithCode, succeedWithCode }) => {\n        console.log(body); // typed as string thanks to parser\n        return succeedWithCode(201, { created: true });\n      },\n    }),\n  }),\n});\n\nexport default endpoint.handler;\n")))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"When using Typescript, it's required to use the double call syntax ",(0,r.kt)("inlineCode",{parentName:"p"},"method<ReturnType>()(definition)")," to use parsers."),(0,r.kt)("p",{parentName:"admonition"},"This allows the ",(0,r.kt)("inlineCode",{parentName:"p"},"ReturnType")," type to be provided explicitly, while inferring the parsed types."),(0,r.kt)("p",{parentName:"admonition"},"If you're using Javascript, this is not required.")))}h.isMDXComponent=!0}}]);